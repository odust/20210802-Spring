<?xml version="1.0" encoding="UTF-8"?>
<!--constructor(c):建構式注入,property(p):setter方法注入-->
<!--Spring Security須自己找課外書補強,未來面試&工作有用-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:c="http://www.springframework.org/schema/c"
		xmlns:p="http://www.springframework.org/schema/p"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
				http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="person" class="com.study.spring.case01.Person"></bean>
	<!--以下scope的預設值即為singleton,可用prototype(每次被取用都會new新的物件)-->
<!--	<bean id="author1" scope="singleton" class="com.study.spring.case01.Author"/>這是自動關閉的寫法-->
	<!--以下setter方法注入(較常用,較穩定)-->
	<bean id="author1"
			scope="singleton"
			class="com.study.spring.case01.Author">
		<property name="name">
			<value>John</value>
		</property>
		<property name="gender">
			<value>男</value>
		</property>
		<property name="age">
			<null/><!--或者<null></null>-->
		</property>
	</bean>
	<!--以下建構式注入(較少用,易出包,e.g.無限遞迴,須檢查建構式或toString()是否造成遞迴)-->
	<bean id="author2"
			scope="singleton"
			class="com.study.spring.case01.Author">
		<constructor-arg value="A" index="1"></constructor-arg>
		<constructor-arg value="女" index="0"></constructor-arg>
		<constructor-arg value="19" index="2" type="java.lang.Integer"></constructor-arg>
	</bean>
	<!--以下DI依賴注入,係setter方法注入(較常用,較穩定)-->
	<bean id="author3" class="com.study.spring.case01.Author"
			p:name="東方教主" p:gender="?" p:age="20"/>
	<!--以下DI依賴注入,係建構式注入(較少用,易出包,e.g.無限遞迴,須檢查建構式或toString()是否造成遞迴)-->
	<bean id="author4" class="com.study.spring.case01.Author"
			c:name="Kerr" c:gender="M" c:age="30"/>
	<!--以下針對author使用物件引用(物件參考)-->
	<bean id="book1" class="com.study.spring.case01.Book">
		<property name="name">
			<value>Spring</value>
		</property>
		<property name="price">
			<value>500</value>
		</property>
		<property name="author" ref="author1"/>
	</bean>

	<bean id="book2" class="com.study.spring.case01.Book">
		<constructor-arg value="Python"></constructor-arg>
		<constructor-arg value="300"></constructor-arg>
		<constructor-arg ref="author2"></constructor-arg>
	</bean>

	<bean id="book3" class="com.study.spring.case01.Book"
			p:name="Java" p:price="200" p:author-ref="author3"/>
			
	<bean id="book4" class="com.study.spring.case01.Book"
			c:name="C#" c:price="100" c:author-ref="author4"/>

	<!--以下若考慮建構式注入,只能先p(husband)後c(wife),無法先c(husband)後p(wife)-->
	<!--建構式注入(c)較少用,setter方法注入(p)較常用,較穩定-->
	<!--若堅持用建構式注入,建構式盡量避免造成遞迴,否則記憶體溢出-->
	<bean id="husband" class="com.study.spring.case01.Husband"
			p:name="John" p:wife-ref="wife"/>
	<bean id="wife" class="com.study.spring.case01.Wife"
			p:name="Mary" p:husband-ref="husband"/>
</beans>
